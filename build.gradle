plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    
    // Add FancyMenu's maven repository
    maven {
        name = "Keksuccino Maven"
        url = "https://keksuccino.github.io/maven/"
    }
    
    // Add flatDir for local JARs (backup option)
    flatDir {
        dirs 'libs'
    }
}

// Explicitly configure source sets
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    client {
        java {
            srcDirs = ['src/client/java']
        }
    }
}

dependencies {
    minecraft "net.minecraft:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
    // Try FancyMenu dependencies from maven first
    try {
        modImplementation "de.keksuccino:konkrete:${project.konkrete_version}"
        modImplementation "de.keksuccino:fancymenu:${project.fancymenu_version}"
    } catch (Exception e) {
        println "Maven dependencies failed, trying local JARs..."
        // Fallback to local JARs if they exist
        modImplementation files('libs/konkrete-1.9.9.jar')
        modImplementation files('libs/fancymenu-3.6.4.jar')
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}